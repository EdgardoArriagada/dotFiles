# js
snippet af Arrow Function
	(${1}) => {
		${3}
	}

snippet faf Full Arrow Function
	const $1 = (${2}) => {
		${3}
	}

snippet log Console Log
	console.log(${1})

snippet logd Console Log Debug
	console.log('le ${1}', {${2}})

# testing
snippet it It Should...
	it('should $1', () => {
		${2}
	})

snippet test Test...
	test('$1', () => {
		${2}
	})

snippet desc Describe...
	describe('$1', () => {
		${2}
	})

snippet beforeEach BeforeEach...
	beforeEach(() => {
		${1}
	})

snippet beforeAll BeforeAll...
	beforeAll(() => {
		${1}
	})

snippet afterEach AfterEach...
	afterEach(() => {
		${1}
	})

snippet afterAll AfterAll...
	afterAll(() => {
		${1}
	})

# Component
snippet fcc React Component 
	type Props = {
	}

	const ${1:ComponentName}: FC<Props> = (${2}) => {
		${3}
		return (
			<>
				${4}
			</>
		)
	}

# Hooks
snippet uses useState
	const [${1:state}, set${2}] = useState(${3:initialState})

snippet usee useEffect
	useEffect(() => {
		${1}
	}, [${3}])

snippet userd useReducer
	const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer})

snippet userf useRef
	const ${1:refContainer} = useRef(${2:initialValue})

snippet usect useContext
	const ${1:value} = useContext(${2:MyContext})

snippet usecb useCallback
	const ${1:memoizedCallback} = useCallback(
	() => {
		${2}(${3})
	},
	[$3]
	)

snippet usem useMemo
	const ${1:memoizedCallback} = useMemo(() => ${2}(${3}), [$3])

snippet usei useImperativeHandle
	useImperativeHandle(${1:ref}, ${2:createHandle})

snippet used useDebugValue
	useDebugValue(${1:value})
